import type { ICard } from "../../—Åard";

export async function clearCardHistory(idCard: number): Promise<ICard> {
  const token = localStorage.getItem("token");
  if (!token) {
    throw new Error("–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. –¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.");
  }

  try {
    const response = await fetch(
      `${import.meta.env.VITE_API_URL}/api/cards/${idCard}`,
      {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify({
          operations: [], // üëà –û—á–∏—â–∞–µ–º –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é
          lastOperation: {
            amount: 0,
            date: new Date().toISOString(),
            description: "–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞",
          },
          balance: 0, // üëà –°–±—Ä–∞—Å—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å
        }),
      }
    );

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.message || "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é");
    }

    const updatedCard: ICard = await response.json();
    return updatedCard;
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
  } catch (error: any) {
    if (error instanceof Error) {
      throw error;
    }
    throw new Error("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.");
  }
}
