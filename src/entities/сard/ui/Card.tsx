import { useState, type JSX } from "react";
import type { ICard } from "../lib";
import { TransactionModal } from "../../add-transaction";
import { TransactionHistoryModal } from "../../transaction-history";
import { EditCardModal } from "../../edit-card";

interface CardProps {
  card: ICard;
}

export function Card({ card }: CardProps): JSX.Element {
  // üîπ –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –º–æ–¥–∞–ª–∫–∏
  const [isModalTransactionOpen, setIsModalTransactionOpen] = useState(false);
  const [isHistoryTransactionOpen, setIsHistoryTransactionOpen] =
    useState(false);
  const [isEditModalOpen, setIsEditModalOpen] = useState(false);
  // üîπ –•—Ä–∞–Ω–∏–º –∫–∞—Ä—Ç–æ—á–∫—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ ‚Äî —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –æ–±–Ω–æ–≤–∏—Ç—å
  const [currentCard, setCurrentCard] = useState<ICard>(card);

  // üîπ –§—É–Ω–∫—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª–∫–∏
  const handleOpenTransactionModal = () => setIsModalTransactionOpen(true);
  const handleOpenHistoryModal = () => setIsHistoryTransactionOpen(true);
  const handleCloseHistoryModal = () => setIsHistoryTransactionOpen(false);
  const handleOpenEditModal = () => setIsEditModalOpen(true);
  const handleCloseEditModal = () => setIsEditModalOpen(false);

  // üîπ –§—É–Ω–∫—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª–∫–∏
  const handleCloseModal = () => setIsModalTransactionOpen(false);

  // üîπ –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  const handleCardUpdate = (updatedCard: ICard) => {
    setCurrentCard(updatedCard);
  };
  const handleDeleteCard = (cardId: number) => {
    console.log("Deleting card:", cardId);

    // –í –±—É–¥—É—â–µ–º: –æ—Ç–ø—Ä–∞–≤–∏—Ç—å DELETE –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    // –°–µ–π—á–∞—Å –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º –∏–∑ UI
    // setCurrentCard({ ...currentCard, _id: -1 } as any); // –≠—Ç–æ –∑–∞–≥–ª—É—à–∫–∞ ‚Äî –∑–∞–º–µ–Ω–∏–º –ø–æ–∑–∂–µ
    // onClose(); // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –∫–∞—Ä—Ç–æ—á–∫—É (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
  };

  console.log(currentCard);

  return (
    <>
      <div
        className="p-5 bg-gray-800 rounded-xl border border-gray-700 text-white shadow-lg transition-all duration-200 hover:shadow-xl transform"
        style={{ backgroundColor: `${currentCard.color}30` }}
      >
        {/* –ù–∞–∑–≤–∞–Ω–∏–µ –∏ –±–∞–ª–∞–Ω—Å */}
        <div className="flex justify-between items-center mb-4">
          <button
            onClick={handleOpenEditModal}
            type="button"
            className="flex items-center gap-1 px-2 py-1 text-xs font-medium cursor-pointer text-blue-300 hover:bg-blue-900/15 rounded-md transition-colors focus:outline-none focus:ring-1 focus:ring-blue-500 focus:ring-offset-1 focus:ring-offset-gray-800"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              className="h-3.5 w-3.5"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z"
              />
            </svg>
            <h3 className="text-xl font-semibold text-white">
              {currentCard.name}
            </h3>
          </button>
          <div className="h-full flex flex-row justify-center items-center gap-2">
            <span className={`text-sm font-medium`}>–ë–∞–ª–∞–Ω—Å:</span>
            <span
              className={`px-3 py-1.5 rounded-full text-sm font-medium ${
                currentCard.balance >= 0 ? "bg-green-600" : "bg-red-600"
              }`}
            >
              {currentCard.balance >= 0 ? "+" : ""}
              {currentCard.balance.toFixed(2)} ‚ÇΩ
            </span>
          </div>
        </div>

        {/* –ü–æ—Å–ª–µ–¥–Ω—è—è –æ–ø–µ—Ä–∞—Ü–∏—è ‚Äî –æ–ø–∏—Å–∞–Ω–∏–µ —Å–ª–µ–≤–∞, —Å—É–º–º–∞ –ø–æ —Ü–µ–Ω—Ç—Ä—É, –∫–Ω–æ–ø–∫–∞ —Å–ø—Ä–∞–≤–∞ */}
        <div className="flex flex-row items-center justify-between">
          <div
            className="p-3 w-[85%] bg-gray-700 rounded-lg border cursor-pointer border-gray-600 flex items-center justify-between hover:bg-blue-900 transition-colors"
            onClick={handleOpenHistoryModal}
          >
            {/* –°–ª–µ–≤–∞: –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –¥–∞—Ç–∞ */}
            <div className="flex-1">
              <p className="text-sm text-gray-300 mb-1">
                {currentCard.lastOperation.description || "‚Äî"}
              </p>
              <time className="text-xs text-gray-400">
                {new Date(currentCard.lastOperation.date).toLocaleString(
                  "ru-RU",
                  {
                    day: "numeric",
                    month: "short",
                    hour: "2-digit",
                    minute: "2-digit",
                  }
                )}
              </time>
            </div>

            {/* –°—É–º–º–∞ ‚Äî –ø–æ —Ü–µ–Ω—Ç—Ä—É, –Ω–æ –Ω–µ –º–µ—à–∞–µ—Ç –∫–Ω–æ–ø–∫–µ */}
            <span
              className={`px-2.5 py-1 rounded-full text-xs font-medium whitespace-nowrap mr-2 ${
                currentCard.lastOperation.amount >= 0
                  ? "bg-green-600"
                  : "bg-red-600"
              }`}
            >
              {currentCard.lastOperation.amount >= 0 ? "+" : "-"}
              {Math.abs(currentCard.lastOperation.amount).toFixed(2)} ‚ÇΩ
            </span>
          </div>
          {/* –ö–Ω–æ–ø–∫–∞ "–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é" ‚Äî —Å–ø—Ä–∞–≤–∞, –º–∏–Ω–∏–∞—Ç—é—Ä–Ω–∞—è, –∫–∞–∫ –≤ MUI */}
          <button
            type="button"
            onClick={handleOpenTransactionModal}
            className="flex items-center justify-center w-8 h-8 rounded-full bg-blue-600 text-white cursor-pointer hover:bg-blue-700 transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 focus:ring-offset-gray-800"
            aria-label="–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              className="h-4 w-4"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                d="M12 6v6m0 0v6m0-6h6m-6 0H6"
              />
            </svg>
          </button>
        </div>
      </div>
      {/* üîπ –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ ‚Äú–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é‚Äù */}
      <TransactionModal
        isOpenParam={isModalTransactionOpen}
        onClose={handleCloseModal}
        idCard={currentCard._id}
        onCardUpdated={handleCardUpdate}
      />
      {/* üîπ –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ ‚Äú–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π‚Äù */}
      <TransactionHistoryModal
        isOpen={isHistoryTransactionOpen}
        onClose={handleCloseHistoryModal}
        operations={currentCard.operations}
      />
      {/* üîπ –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ ‚Äú–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É‚Äù */}
      <EditCardModal
        isOpen={isEditModalOpen}
        onClose={handleCloseEditModal}
        card={currentCard}
        onCardUpdated={handleCardUpdate}
        onDelete={handleDeleteCard}
      />
    </>
  );
}
